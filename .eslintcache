[{"/Users/zee28/Downloads/roborally_frontend/src/index.tsx":"1","/Users/zee28/Downloads/roborally_frontend/src/reportWebVitals.ts":"2","/Users/zee28/Downloads/roborally_frontend/src/App.tsx":"3","/Users/zee28/Downloads/roborally_frontend/src/components/BoardComponent.tsx":"4","/Users/zee28/Downloads/roborally_frontend/src/context/GameContextProvider.tsx":"5","/Users/zee28/Downloads/roborally_frontend/src/context/GameContext.ts":"6","/Users/zee28/Downloads/roborally_frontend/src/api/GameApi.ts":"7","/Users/zee28/Downloads/roborally_frontend/src/components/SpaceComponent.tsx":"8","/Users/zee28/Downloads/roborally_frontend/src/components/GamesComponent.tsx":"9","/Users/zee28/Downloads/roborally_frontend/src/components/GameComponent.tsx":"10"},{"size":514,"mtime":1612698770000,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1612698770000,"results":"13","hashOfConfig":"12"},{"size":648,"mtime":1623059273720,"results":"14","hashOfConfig":"12"},{"size":1776,"mtime":1623933709074,"results":"15","hashOfConfig":"12"},{"size":9924,"mtime":1623940012565,"results":"16","hashOfConfig":"12"},{"size":1143,"mtime":1623506406128,"results":"17","hashOfConfig":"12"},{"size":2129,"mtime":1623955903829,"results":"18","hashOfConfig":"12"},{"size":2329,"mtime":1623254032394,"results":"19","hashOfConfig":"12"},{"size":949,"mtime":1623790653908,"results":"20","hashOfConfig":"12"},{"size":2952,"mtime":1623935650817,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1pxspi0",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"/Users/zee28/Downloads/roborally_frontend/src/index.tsx",[],["46","47"],"/Users/zee28/Downloads/roborally_frontend/src/reportWebVitals.ts",[],"/Users/zee28/Downloads/roborally_frontend/src/App.tsx",[],"/Users/zee28/Downloads/roborally_frontend/src/components/BoardComponent.tsx",[],"/Users/zee28/Downloads/roborally_frontend/src/context/GameContextProvider.tsx",["48"],"import React, {ReactNode, useCallback, useEffect, useMemo, useState} from \"react\"\nimport GameContext from \"./GameContext\"\nimport {Player} from \"../types/Player\";\nimport {Board} from \"../types/Board\";\nimport {Space} from \"../types/Space\";\nimport GameApi from \"../api/GameApi\";\nimport {Game} from \"../types/Game\";\n\n\ntype GameContextProviderPropsType = {\n    children: ReactNode\n}\n\n\nconst GameContextProvider = ({children}: GameContextProviderPropsType) => {\n\n    const [games, setGames] = useState<Game[]>([])\n\n\n    //The code below is executed when the provider is rendered (inside App.tsx)\n    //The code should fetch the data from the API instead of using a static assignment\n    //Define a useState variable, note that useState returns an array, containing that state itself aswell as\n    // a function to set a new state value, here we use array destructuring (the [..., ...] notation).\n    // we also declare that the state variable and setter should be of type /take type Player[]\n    const [loaded, setLoaded] = useState<boolean>(false)\n    const [players, setPlayers] = useState<Player[]>([])\n    const playerCount = useMemo(() => players.length, [players])\n    const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0)\n    const [currentPlayer, setCurrentPlayer] = useState<Player>({playerId : -1,playerColor:\"red\",boardId : -1,playerName : \"\"})\n    const [spaces, setSpaces] = useState<Space[][]>([])\n    const [width, setWidth] = useState<number>(0)\n    const [height, setHeight] = useState<number>(0)\n    const [gameId, setGameId] = useState<number>(0)\n    const [gameName, setGameName] = useState<string>(\"hi\")\n    //const [addPlayer, setAddPlayer] = useState<Player>()\n    //Define a function used to set a player ona  specific space\n    const setPlayerOnSpace = useCallback(async (space: Space) => {\n        //Check if space already has a player standing on it\n        if (!space.playerId) {\n            await GameApi.moveCurrentPlayer(gameId, {...space, playerId: currentPlayer.playerId}).then(() => {\n                let tempSpaces = [...spaces] //Use spread operator to copy spaces array, needed for making immutable changes\n                //See https://bit.ly/2My8Bfz, until the section about Immutable.js\n                tempSpaces[space.x][space.y].playerId = currentPlayer.playerId //Set the player on the new space they clicked on\n\n                if (currentPlayer.x !== undefined && currentPlayer.y !== undefined) { //If the player was standing on a space previously, remove them from that space\n                    tempSpaces[currentPlayer.x][currentPlayer.y].playerId = undefined\n                }\n                setSpaces(tempSpaces)\n                let tempPlayers = [...players]\n                tempPlayers[currentPlayerIndex].x = space.x; //Update the players array to reflect the changes\n                tempPlayers[currentPlayerIndex].y = space.y; //Update the players array to reflect the changes\n                setPlayers(tempPlayers)\n                setCurrentPlayer({...currentPlayer, x: space.x, y: space.y}) //Update current player\n\n            }).catch(() => {\n                console.error(\"Error while moving player\")\n            })\n\n        }\n\n    }, [currentPlayer, currentPlayerIndex, gameId, players, spaces])\n\n    const switchToNextPlayer = useCallback(async () => {\n        await GameApi.switchPlayer(gameId).then(()=>{\n            const newPlayerIndex = (currentPlayerIndex + 1) % playerCount\n            console.log(\"old player index\", currentPlayerIndex, \"new player index\", newPlayerIndex)\n            setCurrentPlayer(players[newPlayerIndex])\n            setCurrentPlayerIndex(newPlayerIndex)\n        }).catch(()=>console.error(\"Error while switching player\"))\n        \n    }, [currentPlayerIndex, gameId, playerCount, players])\n\n\n\n\n    \n    const board = useMemo<Board>(() => {\n        return ({\n            spaceDtos: spaces,\n            playerDtos: players,\n            currentPlayerDto: currentPlayer,\n            currentPlayerIndex: currentPlayerIndex,\n            width: width,\n            height: height,\n            boardName: gameName,\n            boardId: gameId\n        })\n    }, [currentPlayer, currentPlayerIndex, gameId, gameName, height, players, spaces, width])\n\n\n    const addPlayer = useCallback(async (game : Game) => {\n        GameApi.addPlayer(game.id).then(board => {\n\n            //setCurrentPlayer(players[newPlayerIndex])\n\n            //setCurrentPlayer(b)\n\n            //setPlayers(board.playerDtos)\n\n\n\n\n\n        // if (board.playerDtos.length > 0) {\n        //\n        // }\n\n\n        }).catch(() => {\n            console.error(\"\")\n        })\n\n    }, [])\n\n\n    const selectGame = useCallback(async (game: Game) => {\n        game.started = true\n        console.log(board.playerDtos.length)\n        // for (let player of board.playerDtos) {\n        //     console.log(player.playerName)\n        // }\n        if (game.started) {\n            GameApi.getBoard(game.id).then(board=> {\n                if (board.playerDtos.length > 0) {\n                    setSpaces(board.spaceDtos)\n                    setPlayers(board.playerDtos)\n                    setWidth(board.width)\n                    setHeight(board.height)\n                    setGameId(board.boardId)\n                    setGameName(board.boardName)\n\n                    if (board.currentPlayerDto) {\n                        setCurrentPlayer(board.currentPlayerDto)\n                        board.playerDtos.forEach((player, index) => {\n                            if (player.playerId === board.currentPlayerDto?.playerId) {\n                                setCurrentPlayerIndex(index)\n                            }\n                        })\n                    }\n                    setLoaded(true)\n                }\n\n            }).catch(() => {\n                console.error(\"Error while fetching board from backend\")\n            })\n        } else {\n            console.error(\"Selected Game '\" + game.name + \"' is not started yet!\")\n        }\n\n    }, [])\n\n\n    const unselectGame = useCallback(async () => {\n        setGameId(-1)\n        setLoaded(false)\n    }, [])\n\n\n\n    useEffect(() => {\n        const interval = setInterval(async () => {\n\n            if (loaded && gameId) {\n                GameApi.getBoard(gameId).then(board => {\n                    if (gameId === board.boardId) {\n\n                        setSpaces(board.spaceDtos)\n                        setPlayers(board.playerDtos)\n                        setWidth(board.width)\n                        setHeight(board.height)\n                        setGameId(board.boardId)\n                        setGameName(board.boardName)\n\n                        if (board.currentPlayerDto) {\n                            setCurrentPlayer(board.currentPlayerDto)\n                            board.playerDtos.forEach((player, index) => {\n                                if (player.playerId === board.currentPlayerDto?.playerId) {\n                                    setCurrentPlayerIndex(index)\n                                }\n                            })\n\n                        } else {console.error(\"Load outdated\")}\n                    }\n\n\n                }).catch(() => {\n                    console.error(\"Board could not be loaded\")\n                })\n\n\n            } else {\n\n                GameApi.getGames().then(games => {\n                    setGames(games)\n\n                }).catch(() => {\n                    console.error(\"Games could not be loaded\")\n                })\n\n            }\n\n        }, 5000)\n\n        return () => clearInterval(interval)\n\n    }, [loaded, gameId])\n\n\n\n\n\n\n\n\n\n    return (\n        <GameContext.Provider\n            value={\n                {\n                    loaded: loaded,\n                    board: board,\n                    games: games,\n                    setCurrentPlayerOnSpace: setPlayerOnSpace,\n                    switchCurrentPlayer: switchToNextPlayer,\n                    selectGame: selectGame,\n                    unselectGame: unselectGame,\n                    addPlayer: addPlayer,\n                    \n                }\n            }>\n            {children} {/*See: https://reactjs.org/docs/composition-vs-inheritance.html*/}\n        </GameContext.Provider>\n    )\n}\n\nexport default GameContextProvider\n\n\n\n\n// useEffect( () => {\n//     const interval = setInterval( async () => {\n//\n//         if (loaded && gameId >= 0) {\n//             GameApi.getBoard(gameId).then(board => {\n//                 if (gameId === board.boardId) {\n//                     setSpaces(board.spaceDtos)\n//                     setPlayers(board.playerDtos)\n//                     setWidth(board.width)\n//                     setHeight(board.height)\n//                     setGameId(board.boardId)\n//                     setGameName(board.boardName)\n//\n//                     if (board.currentPlayerDto) {\n//                         setCurrentPlayer(board.currentPlayerDto)\n//                         board.playerDtos.forEach((player, index) => {\n//                             if (player.playerId === board.currentPlayerDto?.playerId) {\n//                                 setCurrentPlayerIndex(index)\n//                             }\n//                         })\n//                     } else {\n//                         console.error(\"Load outdated\")\n//                     }\n//                 }\n//             }).catch(() => {\n//                 console.error(\"Board could not be loaded\")\n//             })\n//         } else {\n//             GameApi.getGames()\n//             setGames(games)\n//             //setGames(games)\n//             // GameApi.getGames().then( games => {\n//             //     setGames(games)\n//             //\n//             //\n//             // }).catch(() => {\n//             //     console.error(\"Games could not be loaded\")\n//             // });\n//         }\n//     }, 5000)\n//\n//     return () => clearInterval(interval)\n// }, [loaded, gameId])\n","/Users/zee28/Downloads/roborally_frontend/src/context/GameContext.ts",[],"/Users/zee28/Downloads/roborally_frontend/src/api/GameApi.ts",["49"],"import axios from \"axios\";\nimport {Board} from \"../types/Board\";\nimport {Space} from \"../types/Space\";\nimport {Game} from \"../types/Game\";\nimport {useState} from \"react\";\n\nclass GameApi{\n    private static instance : GameApi;\n    private readonly BACKEND_URL = \"http://localhost:8080\"\n\n\n\n\n    private constructor() {\n    }\n\n    public static getInstance():GameApi{\n        if(!GameApi.instance){\n            GameApi.instance = new GameApi();\n        }\n        return GameApi.instance;\n    }\n\n    public getBoard(boardId : number){\n        return axios.get<Board>(`${this.BACKEND_URL}/board/${boardId}`).then(value =>value.data)\n    }\n\n    public moveCurrentPlayer(boardId : number, space : Space){\n        return axios.put(`${this.BACKEND_URL}/board/${boardId}/move`,space)\n    }\n\n    public switchPlayer(boardId : number){\n        return axios.put(`${this.BACKEND_URL}/board/${boardId}/switchplayer`)\n    }\n\n\n\n    public addPlayer(boardId : number) {\n\n        const player = {\n            boardId: boardId,\n            playerId: null,\n            playerName: null,\n            playerColor: null,\n            x:null,\n            y:null\n\n        }\n\n        return axios.post(`${this.BACKEND_URL}/board/${boardId}/player`, player).then(value => value.data)\n    }\n\n\n\n    public getGames() {\n        return axios.get<Game[]>(`${this.BACKEND_URL}/game`).then(value =>value.data)\n        //return GameApi.games\n    }\n\n\n    public createGame() {\n        const game = {\n            name: \"Test Game\",\n            started: false,\n            users: []\n        }\n\n        return axios.post<number>(`${this.BACKEND_URL}/game/`, game).then(value =>value.data)\n    }\n\n\n    public createBoard(game: Game, width: number, height: number) {\n       // console.log(game.id)\n\n        const board = {\n            boardId : game.id,\n            boardName: \"default\",\n            width: width,\n            height: height,\n            spaceDtos: [],\n            playerDtos: []\n        }\n\n        return axios.post<number>(`${this.BACKEND_URL}/board/`, board).then(value =>value.data)\n    }\n}\n\nexport default GameApi.getInstance()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/Users/zee28/Downloads/roborally_frontend/src/components/SpaceComponent.tsx",[],"/Users/zee28/Downloads/roborally_frontend/src/components/GamesComponent.tsx",[],"/Users/zee28/Downloads/roborally_frontend/src/components/GameComponent.tsx",["50","51"],"import {FunctionComponent, useContext, useState} from \"react\";\nimport {Game} from \"../types/Game\";\nimport GameContext from \"../context/GameContext\";\nimport GameApi from \"../api/GameApi\";\nimport {Board} from \"../types/Board\";\nimport GameContextProvider from \"../context/GameContextProvider\";\n\nexport type GameComponentProps = {\n    game: Game\n}\n\nexport const GameComponent: FunctionComponent<GameComponentProps> = ({game}) => {\n    const {selectGame} = useContext(GameContext)\n    const {addPlayer} = useContext(GameContext)\n\n    const onClickGame = async () => {\n        selectGame(game)\n    }\n\n    const [edit, setEdit] = useState(false);\n    const [name, setName] = useState(game.name)\n\n    const onClickEdit = () => {\n        setEdit(true)\n        console.log(\"onClick Edit\")\n    }\n\n    const onClickAddPlayer = () => {\n        addPlayer(game)\n    }\n\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setName(event.target.value)\n        console.log(\"Game name: \" + game.name + \"; new name: \" + event.target.value)\n    }\n\n\n    const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        console.log(\"Game name: \" + game.name + \"; new name: \" + name)\n        setEdit(false)\n    }\n\n    const onClickCreateBoard = async ()=> {\n        await GameApi.createBoard(game,5, 5)\n    }\n\n\n    return (\n        <div>\n            { !edit ?\n                <div>\n                    <b>{game.id}: {name}</b> &nbsp;\n                    <button type=\"button\" onClick={onClickAddPlayer}>Add Player</button>&nbsp;\n                    <button type=\"button\" onClick={onClickEdit}>Edit</button> &nbsp;\n                    <button type=\"button\" onClick={onClickGame}>Play</button>&nbsp;\n                    <button type=\"button\" onClick={onClickCreateBoard}>Create Board</button>&nbsp;\n\n\n                </div>\n                :\n                <form onSubmit={onSubmit}>\n                    <input\n                        name = \"name\"\n                        type = \"text\"\n                        value = {name}\n                        required\n                        onChange={onChange}\n                    />\n                    <input type=\"submit\" value={\"Save name\" + (name !== game.name ? \" (needed)\" : \"\")} />\n                </form>\n            }\n\n            <ul>\n\n                {\n                    game.users.map( (user, index) =>\n                        <li>{user.playerName} (no function yet) </li>)\n                }\n\n            </ul>\n\n        </div>\n    )\n\n\n\n    // return (\n    //     <div onClick={onClick}>\n    //         <h1>{game.id}: {game.name}</h1>\n    //         <ul>\n    //             {\n    //             game.users.map( (user, index) =>\n    //             <li>{ user.playerName } (no function yet) </li>)\n    //             }\n    //         </ul>\n    //\n    //     </div>\n    // )\n}\n\n\n\n\n//\n// {\n//     game.users.map( (user, index) =>\n//         <li>{user.playerName} (no function yet) </li>)\n// }",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":150,"column":8,"nodeType":"58","endLine":150,"endColumn":10,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":5,"column":9,"nodeType":"62","messageId":"63","endLine":5,"endColumn":17},{"ruleId":"60","severity":1,"message":"64","line":5,"column":9,"nodeType":"62","messageId":"63","endLine":5,"endColumn":14},{"ruleId":"60","severity":1,"message":"65","line":6,"column":8,"nodeType":"62","messageId":"63","endLine":6,"endColumn":27},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'board.playerDtos.length'. Either include it or remove the dependency array.","ArrayExpression",["68"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Board' is defined but never used.","'GameContextProvider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [board.playerDtos.length]",{"range":"71","text":"72"},[6005,6007],"[board.playerDtos.length]"]